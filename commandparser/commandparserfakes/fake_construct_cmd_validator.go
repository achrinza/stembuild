// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/stembuild/commandparser"
)

type FakeConstructCmdValidator struct {
	LGPOInDirectoryStub        func() bool
	lGPOInDirectoryMutex       sync.RWMutex
	lGPOInDirectoryArgsForCall []struct {
	}
	lGPOInDirectoryReturns struct {
		result1 bool
	}
	lGPOInDirectoryReturnsOnCall map[int]struct {
		result1 bool
	}
	NonEmptyArgsStub        func(...string) bool
	nonEmptyArgsMutex       sync.RWMutex
	nonEmptyArgsArgsForCall []struct {
		arg1 []string
	}
	nonEmptyArgsReturns struct {
		result1 bool
	}
	nonEmptyArgsReturnsOnCall map[int]struct {
		result1 bool
	}
	ValidStemcellInfoStub        func(string) bool
	validStemcellInfoMutex       sync.RWMutex
	validStemcellInfoArgsForCall []struct {
		arg1 string
	}
	validStemcellInfoReturns struct {
		result1 bool
	}
	validStemcellInfoReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConstructCmdValidator) LGPOInDirectory() bool {
	fake.lGPOInDirectoryMutex.Lock()
	ret, specificReturn := fake.lGPOInDirectoryReturnsOnCall[len(fake.lGPOInDirectoryArgsForCall)]
	fake.lGPOInDirectoryArgsForCall = append(fake.lGPOInDirectoryArgsForCall, struct {
	}{})
	fake.recordInvocation("LGPOInDirectory", []interface{}{})
	fake.lGPOInDirectoryMutex.Unlock()
	if fake.LGPOInDirectoryStub != nil {
		return fake.LGPOInDirectoryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.lGPOInDirectoryReturns
	return fakeReturns.result1
}

func (fake *FakeConstructCmdValidator) LGPOInDirectoryCallCount() int {
	fake.lGPOInDirectoryMutex.RLock()
	defer fake.lGPOInDirectoryMutex.RUnlock()
	return len(fake.lGPOInDirectoryArgsForCall)
}

func (fake *FakeConstructCmdValidator) LGPOInDirectoryCalls(stub func() bool) {
	fake.lGPOInDirectoryMutex.Lock()
	defer fake.lGPOInDirectoryMutex.Unlock()
	fake.LGPOInDirectoryStub = stub
}

func (fake *FakeConstructCmdValidator) LGPOInDirectoryReturns(result1 bool) {
	fake.lGPOInDirectoryMutex.Lock()
	defer fake.lGPOInDirectoryMutex.Unlock()
	fake.LGPOInDirectoryStub = nil
	fake.lGPOInDirectoryReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConstructCmdValidator) LGPOInDirectoryReturnsOnCall(i int, result1 bool) {
	fake.lGPOInDirectoryMutex.Lock()
	defer fake.lGPOInDirectoryMutex.Unlock()
	fake.LGPOInDirectoryStub = nil
	if fake.lGPOInDirectoryReturnsOnCall == nil {
		fake.lGPOInDirectoryReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.lGPOInDirectoryReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConstructCmdValidator) NonEmptyArgs(arg1 ...string) bool {
	fake.nonEmptyArgsMutex.Lock()
	ret, specificReturn := fake.nonEmptyArgsReturnsOnCall[len(fake.nonEmptyArgsArgsForCall)]
	fake.nonEmptyArgsArgsForCall = append(fake.nonEmptyArgsArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.recordInvocation("NonEmptyArgs", []interface{}{arg1})
	fake.nonEmptyArgsMutex.Unlock()
	if fake.NonEmptyArgsStub != nil {
		return fake.NonEmptyArgsStub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nonEmptyArgsReturns
	return fakeReturns.result1
}

func (fake *FakeConstructCmdValidator) NonEmptyArgsCallCount() int {
	fake.nonEmptyArgsMutex.RLock()
	defer fake.nonEmptyArgsMutex.RUnlock()
	return len(fake.nonEmptyArgsArgsForCall)
}

func (fake *FakeConstructCmdValidator) NonEmptyArgsCalls(stub func(...string) bool) {
	fake.nonEmptyArgsMutex.Lock()
	defer fake.nonEmptyArgsMutex.Unlock()
	fake.NonEmptyArgsStub = stub
}

func (fake *FakeConstructCmdValidator) NonEmptyArgsArgsForCall(i int) []string {
	fake.nonEmptyArgsMutex.RLock()
	defer fake.nonEmptyArgsMutex.RUnlock()
	argsForCall := fake.nonEmptyArgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConstructCmdValidator) NonEmptyArgsReturns(result1 bool) {
	fake.nonEmptyArgsMutex.Lock()
	defer fake.nonEmptyArgsMutex.Unlock()
	fake.NonEmptyArgsStub = nil
	fake.nonEmptyArgsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConstructCmdValidator) NonEmptyArgsReturnsOnCall(i int, result1 bool) {
	fake.nonEmptyArgsMutex.Lock()
	defer fake.nonEmptyArgsMutex.Unlock()
	fake.NonEmptyArgsStub = nil
	if fake.nonEmptyArgsReturnsOnCall == nil {
		fake.nonEmptyArgsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nonEmptyArgsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConstructCmdValidator) ValidStemcellInfo(arg1 string) bool {
	fake.validStemcellInfoMutex.Lock()
	ret, specificReturn := fake.validStemcellInfoReturnsOnCall[len(fake.validStemcellInfoArgsForCall)]
	fake.validStemcellInfoArgsForCall = append(fake.validStemcellInfoArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ValidStemcellInfo", []interface{}{arg1})
	fake.validStemcellInfoMutex.Unlock()
	if fake.ValidStemcellInfoStub != nil {
		return fake.ValidStemcellInfoStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.validStemcellInfoReturns
	return fakeReturns.result1
}

func (fake *FakeConstructCmdValidator) ValidStemcellInfoCallCount() int {
	fake.validStemcellInfoMutex.RLock()
	defer fake.validStemcellInfoMutex.RUnlock()
	return len(fake.validStemcellInfoArgsForCall)
}

func (fake *FakeConstructCmdValidator) ValidStemcellInfoCalls(stub func(string) bool) {
	fake.validStemcellInfoMutex.Lock()
	defer fake.validStemcellInfoMutex.Unlock()
	fake.ValidStemcellInfoStub = stub
}

func (fake *FakeConstructCmdValidator) ValidStemcellInfoArgsForCall(i int) string {
	fake.validStemcellInfoMutex.RLock()
	defer fake.validStemcellInfoMutex.RUnlock()
	argsForCall := fake.validStemcellInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConstructCmdValidator) ValidStemcellInfoReturns(result1 bool) {
	fake.validStemcellInfoMutex.Lock()
	defer fake.validStemcellInfoMutex.Unlock()
	fake.ValidStemcellInfoStub = nil
	fake.validStemcellInfoReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConstructCmdValidator) ValidStemcellInfoReturnsOnCall(i int, result1 bool) {
	fake.validStemcellInfoMutex.Lock()
	defer fake.validStemcellInfoMutex.Unlock()
	fake.ValidStemcellInfoStub = nil
	if fake.validStemcellInfoReturnsOnCall == nil {
		fake.validStemcellInfoReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.validStemcellInfoReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConstructCmdValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lGPOInDirectoryMutex.RLock()
	defer fake.lGPOInDirectoryMutex.RUnlock()
	fake.nonEmptyArgsMutex.RLock()
	defer fake.nonEmptyArgsMutex.RUnlock()
	fake.validStemcellInfoMutex.RLock()
	defer fake.validStemcellInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConstructCmdValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.ConstructCmdValidator = new(FakeConstructCmdValidator)
