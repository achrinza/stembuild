// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/stembuild/commandparser"
)

type FakeConstructMessenger struct {
	ArgumentsNotProvidedStub        func()
	argumentsNotProvidedMutex       sync.RWMutex
	argumentsNotProvidedArgsForCall []struct {
	}
	InvalidStemcellVersionStub        func()
	invalidStemcellVersionMutex       sync.RWMutex
	invalidStemcellVersionArgsForCall []struct {
	}
	LGPONotFoundStub        func()
	lGPONotFoundMutex       sync.RWMutex
	lGPONotFoundArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConstructMessenger) ArgumentsNotProvided() {
	fake.argumentsNotProvidedMutex.Lock()
	fake.argumentsNotProvidedArgsForCall = append(fake.argumentsNotProvidedArgsForCall, struct {
	}{})
	fake.recordInvocation("ArgumentsNotProvided", []interface{}{})
	fake.argumentsNotProvidedMutex.Unlock()
	if fake.ArgumentsNotProvidedStub != nil {
		fake.ArgumentsNotProvidedStub()
	}
}

func (fake *FakeConstructMessenger) ArgumentsNotProvidedCallCount() int {
	fake.argumentsNotProvidedMutex.RLock()
	defer fake.argumentsNotProvidedMutex.RUnlock()
	return len(fake.argumentsNotProvidedArgsForCall)
}

func (fake *FakeConstructMessenger) ArgumentsNotProvidedCalls(stub func()) {
	fake.argumentsNotProvidedMutex.Lock()
	defer fake.argumentsNotProvidedMutex.Unlock()
	fake.ArgumentsNotProvidedStub = stub
}

func (fake *FakeConstructMessenger) InvalidStemcellVersion() {
	fake.invalidStemcellVersionMutex.Lock()
	fake.invalidStemcellVersionArgsForCall = append(fake.invalidStemcellVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("InvalidStemcellVersion", []interface{}{})
	fake.invalidStemcellVersionMutex.Unlock()
	if fake.InvalidStemcellVersionStub != nil {
		fake.InvalidStemcellVersionStub()
	}
}

func (fake *FakeConstructMessenger) InvalidStemcellVersionCallCount() int {
	fake.invalidStemcellVersionMutex.RLock()
	defer fake.invalidStemcellVersionMutex.RUnlock()
	return len(fake.invalidStemcellVersionArgsForCall)
}

func (fake *FakeConstructMessenger) InvalidStemcellVersionCalls(stub func()) {
	fake.invalidStemcellVersionMutex.Lock()
	defer fake.invalidStemcellVersionMutex.Unlock()
	fake.InvalidStemcellVersionStub = stub
}

func (fake *FakeConstructMessenger) LGPONotFound() {
	fake.lGPONotFoundMutex.Lock()
	fake.lGPONotFoundArgsForCall = append(fake.lGPONotFoundArgsForCall, struct {
	}{})
	fake.recordInvocation("LGPONotFound", []interface{}{})
	fake.lGPONotFoundMutex.Unlock()
	if fake.LGPONotFoundStub != nil {
		fake.LGPONotFoundStub()
	}
}

func (fake *FakeConstructMessenger) LGPONotFoundCallCount() int {
	fake.lGPONotFoundMutex.RLock()
	defer fake.lGPONotFoundMutex.RUnlock()
	return len(fake.lGPONotFoundArgsForCall)
}

func (fake *FakeConstructMessenger) LGPONotFoundCalls(stub func()) {
	fake.lGPONotFoundMutex.Lock()
	defer fake.lGPONotFoundMutex.Unlock()
	fake.LGPONotFoundStub = stub
}

func (fake *FakeConstructMessenger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.argumentsNotProvidedMutex.RLock()
	defer fake.argumentsNotProvidedMutex.RUnlock()
	fake.invalidStemcellVersionMutex.RLock()
	defer fake.invalidStemcellVersionMutex.RUnlock()
	fake.lGPONotFoundMutex.RLock()
	defer fake.lGPONotFoundMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConstructMessenger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.ConstructMessenger = new(FakeConstructMessenger)
