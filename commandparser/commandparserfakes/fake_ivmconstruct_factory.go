// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/stembuild/commandparser"
)

type FakeIVMConstructFactory struct {
	GetVMPreparerStub        func(string, string, string) commandparser.VMPreparer
	getVMPreparerMutex       sync.RWMutex
	getVMPreparerArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getVMPreparerReturns struct {
		result1 commandparser.VMPreparer
	}
	getVMPreparerReturnsOnCall map[int]struct {
		result1 commandparser.VMPreparer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIVMConstructFactory) GetVMPreparer(arg1 string, arg2 string, arg3 string) commandparser.VMPreparer {
	fake.getVMPreparerMutex.Lock()
	ret, specificReturn := fake.getVMPreparerReturnsOnCall[len(fake.getVMPreparerArgsForCall)]
	fake.getVMPreparerArgsForCall = append(fake.getVMPreparerArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetVMPreparer", []interface{}{arg1, arg2, arg3})
	fake.getVMPreparerMutex.Unlock()
	if fake.GetVMPreparerStub != nil {
		return fake.GetVMPreparerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getVMPreparerReturns
	return fakeReturns.result1
}

func (fake *FakeIVMConstructFactory) GetVMPreparerCallCount() int {
	fake.getVMPreparerMutex.RLock()
	defer fake.getVMPreparerMutex.RUnlock()
	return len(fake.getVMPreparerArgsForCall)
}

func (fake *FakeIVMConstructFactory) GetVMPreparerCalls(stub func(string, string, string) commandparser.VMPreparer) {
	fake.getVMPreparerMutex.Lock()
	defer fake.getVMPreparerMutex.Unlock()
	fake.GetVMPreparerStub = stub
}

func (fake *FakeIVMConstructFactory) GetVMPreparerArgsForCall(i int) (string, string, string) {
	fake.getVMPreparerMutex.RLock()
	defer fake.getVMPreparerMutex.RUnlock()
	argsForCall := fake.getVMPreparerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIVMConstructFactory) GetVMPreparerReturns(result1 commandparser.VMPreparer) {
	fake.getVMPreparerMutex.Lock()
	defer fake.getVMPreparerMutex.Unlock()
	fake.GetVMPreparerStub = nil
	fake.getVMPreparerReturns = struct {
		result1 commandparser.VMPreparer
	}{result1}
}

func (fake *FakeIVMConstructFactory) GetVMPreparerReturnsOnCall(i int, result1 commandparser.VMPreparer) {
	fake.getVMPreparerMutex.Lock()
	defer fake.getVMPreparerMutex.Unlock()
	fake.GetVMPreparerStub = nil
	if fake.getVMPreparerReturnsOnCall == nil {
		fake.getVMPreparerReturnsOnCall = make(map[int]struct {
			result1 commandparser.VMPreparer
		})
	}
	fake.getVMPreparerReturnsOnCall[i] = struct {
		result1 commandparser.VMPreparer
	}{result1}
}

func (fake *FakeIVMConstructFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVMPreparerMutex.RLock()
	defer fake.getVMPreparerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIVMConstructFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.IVMConstructFactory = new(FakeIVMConstructFactory)
