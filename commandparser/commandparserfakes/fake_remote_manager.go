// Code generated by counterfeiter. DO NOT EDIT.
package commandparserfakes

import (
	sync "sync"

	commandparser "github.com/cloudfoundry-incubator/stembuild/commandparser"
)

type FakeRemoteManager struct {
	ExecuteCommandStub        func(string) error
	executeCommandMutex       sync.RWMutex
	executeCommandArgsForCall []struct {
		arg1 string
	}
	executeCommandReturns struct {
		result1 error
	}
	executeCommandReturnsOnCall map[int]struct {
		result1 error
	}
	ExtractArchiveStub        func(string, string) error
	extractArchiveMutex       sync.RWMutex
	extractArchiveArgsForCall []struct {
		arg1 string
		arg2 string
	}
	extractArchiveReturns struct {
		result1 error
	}
	extractArchiveReturnsOnCall map[int]struct {
		result1 error
	}
	UploadArtifactStub        func(string, string) error
	uploadArtifactMutex       sync.RWMutex
	uploadArtifactArgsForCall []struct {
		arg1 string
		arg2 string
	}
	uploadArtifactReturns struct {
		result1 error
	}
	uploadArtifactReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRemoteManager) ExecuteCommand(arg1 string) error {
	fake.executeCommandMutex.Lock()
	ret, specificReturn := fake.executeCommandReturnsOnCall[len(fake.executeCommandArgsForCall)]
	fake.executeCommandArgsForCall = append(fake.executeCommandArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ExecuteCommand", []interface{}{arg1})
	fake.executeCommandMutex.Unlock()
	if fake.ExecuteCommandStub != nil {
		return fake.ExecuteCommandStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.executeCommandReturns
	return fakeReturns.result1
}

func (fake *FakeRemoteManager) ExecuteCommandCallCount() int {
	fake.executeCommandMutex.RLock()
	defer fake.executeCommandMutex.RUnlock()
	return len(fake.executeCommandArgsForCall)
}

func (fake *FakeRemoteManager) ExecuteCommandCalls(stub func(string) error) {
	fake.executeCommandMutex.Lock()
	defer fake.executeCommandMutex.Unlock()
	fake.ExecuteCommandStub = stub
}

func (fake *FakeRemoteManager) ExecuteCommandArgsForCall(i int) string {
	fake.executeCommandMutex.RLock()
	defer fake.executeCommandMutex.RUnlock()
	argsForCall := fake.executeCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRemoteManager) ExecuteCommandReturns(result1 error) {
	fake.executeCommandMutex.Lock()
	defer fake.executeCommandMutex.Unlock()
	fake.ExecuteCommandStub = nil
	fake.executeCommandReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRemoteManager) ExecuteCommandReturnsOnCall(i int, result1 error) {
	fake.executeCommandMutex.Lock()
	defer fake.executeCommandMutex.Unlock()
	fake.ExecuteCommandStub = nil
	if fake.executeCommandReturnsOnCall == nil {
		fake.executeCommandReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeCommandReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRemoteManager) ExtractArchive(arg1 string, arg2 string) error {
	fake.extractArchiveMutex.Lock()
	ret, specificReturn := fake.extractArchiveReturnsOnCall[len(fake.extractArchiveArgsForCall)]
	fake.extractArchiveArgsForCall = append(fake.extractArchiveArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ExtractArchive", []interface{}{arg1, arg2})
	fake.extractArchiveMutex.Unlock()
	if fake.ExtractArchiveStub != nil {
		return fake.ExtractArchiveStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.extractArchiveReturns
	return fakeReturns.result1
}

func (fake *FakeRemoteManager) ExtractArchiveCallCount() int {
	fake.extractArchiveMutex.RLock()
	defer fake.extractArchiveMutex.RUnlock()
	return len(fake.extractArchiveArgsForCall)
}

func (fake *FakeRemoteManager) ExtractArchiveCalls(stub func(string, string) error) {
	fake.extractArchiveMutex.Lock()
	defer fake.extractArchiveMutex.Unlock()
	fake.ExtractArchiveStub = stub
}

func (fake *FakeRemoteManager) ExtractArchiveArgsForCall(i int) (string, string) {
	fake.extractArchiveMutex.RLock()
	defer fake.extractArchiveMutex.RUnlock()
	argsForCall := fake.extractArchiveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRemoteManager) ExtractArchiveReturns(result1 error) {
	fake.extractArchiveMutex.Lock()
	defer fake.extractArchiveMutex.Unlock()
	fake.ExtractArchiveStub = nil
	fake.extractArchiveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRemoteManager) ExtractArchiveReturnsOnCall(i int, result1 error) {
	fake.extractArchiveMutex.Lock()
	defer fake.extractArchiveMutex.Unlock()
	fake.ExtractArchiveStub = nil
	if fake.extractArchiveReturnsOnCall == nil {
		fake.extractArchiveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.extractArchiveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRemoteManager) UploadArtifact(arg1 string, arg2 string) error {
	fake.uploadArtifactMutex.Lock()
	ret, specificReturn := fake.uploadArtifactReturnsOnCall[len(fake.uploadArtifactArgsForCall)]
	fake.uploadArtifactArgsForCall = append(fake.uploadArtifactArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UploadArtifact", []interface{}{arg1, arg2})
	fake.uploadArtifactMutex.Unlock()
	if fake.UploadArtifactStub != nil {
		return fake.UploadArtifactStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadArtifactReturns
	return fakeReturns.result1
}

func (fake *FakeRemoteManager) UploadArtifactCallCount() int {
	fake.uploadArtifactMutex.RLock()
	defer fake.uploadArtifactMutex.RUnlock()
	return len(fake.uploadArtifactArgsForCall)
}

func (fake *FakeRemoteManager) UploadArtifactCalls(stub func(string, string) error) {
	fake.uploadArtifactMutex.Lock()
	defer fake.uploadArtifactMutex.Unlock()
	fake.UploadArtifactStub = stub
}

func (fake *FakeRemoteManager) UploadArtifactArgsForCall(i int) (string, string) {
	fake.uploadArtifactMutex.RLock()
	defer fake.uploadArtifactMutex.RUnlock()
	argsForCall := fake.uploadArtifactArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRemoteManager) UploadArtifactReturns(result1 error) {
	fake.uploadArtifactMutex.Lock()
	defer fake.uploadArtifactMutex.Unlock()
	fake.UploadArtifactStub = nil
	fake.uploadArtifactReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRemoteManager) UploadArtifactReturnsOnCall(i int, result1 error) {
	fake.uploadArtifactMutex.Lock()
	defer fake.uploadArtifactMutex.Unlock()
	fake.UploadArtifactStub = nil
	if fake.uploadArtifactReturnsOnCall == nil {
		fake.uploadArtifactReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadArtifactReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRemoteManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeCommandMutex.RLock()
	defer fake.executeCommandMutex.RUnlock()
	fake.extractArchiveMutex.RLock()
	defer fake.extractArchiveMutex.RUnlock()
	fake.uploadArtifactMutex.RLock()
	defer fake.uploadArtifactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRemoteManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandparser.RemoteManager = new(FakeRemoteManager)
