// Code generated by counterfeiter. DO NOT EDIT.
package guest_managerfakes

import (
	context "context"
	sync "sync"

	guest_manager "github.com/cloudfoundry-incubator/stembuild/iaas_cli/iaas_clients/guest_manager"
	types "github.com/vmware/govmomi/vim25/types"
)

type FakeProcManager struct {
	ListProcessesStub        func(context.Context, types.BaseGuestAuthentication, []int64) ([]types.GuestProcessInfo, error)
	listProcessesMutex       sync.RWMutex
	listProcessesArgsForCall []struct {
		arg1 context.Context
		arg2 types.BaseGuestAuthentication
		arg3 []int64
	}
	listProcessesReturns struct {
		result1 []types.GuestProcessInfo
		result2 error
	}
	listProcessesReturnsOnCall map[int]struct {
		result1 []types.GuestProcessInfo
		result2 error
	}
	StartProgramStub        func(context.Context, types.BaseGuestAuthentication, types.BaseGuestProgramSpec) (int64, error)
	startProgramMutex       sync.RWMutex
	startProgramArgsForCall []struct {
		arg1 context.Context
		arg2 types.BaseGuestAuthentication
		arg3 types.BaseGuestProgramSpec
	}
	startProgramReturns struct {
		result1 int64
		result2 error
	}
	startProgramReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcManager) ListProcesses(arg1 context.Context, arg2 types.BaseGuestAuthentication, arg3 []int64) ([]types.GuestProcessInfo, error) {
	var arg3Copy []int64
	if arg3 != nil {
		arg3Copy = make([]int64, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.listProcessesMutex.Lock()
	ret, specificReturn := fake.listProcessesReturnsOnCall[len(fake.listProcessesArgsForCall)]
	fake.listProcessesArgsForCall = append(fake.listProcessesArgsForCall, struct {
		arg1 context.Context
		arg2 types.BaseGuestAuthentication
		arg3 []int64
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("ListProcesses", []interface{}{arg1, arg2, arg3Copy})
	fake.listProcessesMutex.Unlock()
	if fake.ListProcessesStub != nil {
		return fake.ListProcessesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listProcessesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcManager) ListProcessesCallCount() int {
	fake.listProcessesMutex.RLock()
	defer fake.listProcessesMutex.RUnlock()
	return len(fake.listProcessesArgsForCall)
}

func (fake *FakeProcManager) ListProcessesCalls(stub func(context.Context, types.BaseGuestAuthentication, []int64) ([]types.GuestProcessInfo, error)) {
	fake.listProcessesMutex.Lock()
	defer fake.listProcessesMutex.Unlock()
	fake.ListProcessesStub = stub
}

func (fake *FakeProcManager) ListProcessesArgsForCall(i int) (context.Context, types.BaseGuestAuthentication, []int64) {
	fake.listProcessesMutex.RLock()
	defer fake.listProcessesMutex.RUnlock()
	argsForCall := fake.listProcessesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProcManager) ListProcessesReturns(result1 []types.GuestProcessInfo, result2 error) {
	fake.listProcessesMutex.Lock()
	defer fake.listProcessesMutex.Unlock()
	fake.ListProcessesStub = nil
	fake.listProcessesReturns = struct {
		result1 []types.GuestProcessInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeProcManager) ListProcessesReturnsOnCall(i int, result1 []types.GuestProcessInfo, result2 error) {
	fake.listProcessesMutex.Lock()
	defer fake.listProcessesMutex.Unlock()
	fake.ListProcessesStub = nil
	if fake.listProcessesReturnsOnCall == nil {
		fake.listProcessesReturnsOnCall = make(map[int]struct {
			result1 []types.GuestProcessInfo
			result2 error
		})
	}
	fake.listProcessesReturnsOnCall[i] = struct {
		result1 []types.GuestProcessInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeProcManager) StartProgram(arg1 context.Context, arg2 types.BaseGuestAuthentication, arg3 types.BaseGuestProgramSpec) (int64, error) {
	fake.startProgramMutex.Lock()
	ret, specificReturn := fake.startProgramReturnsOnCall[len(fake.startProgramArgsForCall)]
	fake.startProgramArgsForCall = append(fake.startProgramArgsForCall, struct {
		arg1 context.Context
		arg2 types.BaseGuestAuthentication
		arg3 types.BaseGuestProgramSpec
	}{arg1, arg2, arg3})
	fake.recordInvocation("StartProgram", []interface{}{arg1, arg2, arg3})
	fake.startProgramMutex.Unlock()
	if fake.StartProgramStub != nil {
		return fake.StartProgramStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startProgramReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcManager) StartProgramCallCount() int {
	fake.startProgramMutex.RLock()
	defer fake.startProgramMutex.RUnlock()
	return len(fake.startProgramArgsForCall)
}

func (fake *FakeProcManager) StartProgramCalls(stub func(context.Context, types.BaseGuestAuthentication, types.BaseGuestProgramSpec) (int64, error)) {
	fake.startProgramMutex.Lock()
	defer fake.startProgramMutex.Unlock()
	fake.StartProgramStub = stub
}

func (fake *FakeProcManager) StartProgramArgsForCall(i int) (context.Context, types.BaseGuestAuthentication, types.BaseGuestProgramSpec) {
	fake.startProgramMutex.RLock()
	defer fake.startProgramMutex.RUnlock()
	argsForCall := fake.startProgramArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProcManager) StartProgramReturns(result1 int64, result2 error) {
	fake.startProgramMutex.Lock()
	defer fake.startProgramMutex.Unlock()
	fake.StartProgramStub = nil
	fake.startProgramReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeProcManager) StartProgramReturnsOnCall(i int, result1 int64, result2 error) {
	fake.startProgramMutex.Lock()
	defer fake.startProgramMutex.Unlock()
	fake.StartProgramStub = nil
	if fake.startProgramReturnsOnCall == nil {
		fake.startProgramReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.startProgramReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeProcManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listProcessesMutex.RLock()
	defer fake.listProcessesMutex.RUnlock()
	fake.startProgramMutex.RLock()
	defer fake.startProgramMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ guest_manager.ProcManager = new(FakeProcManager)
