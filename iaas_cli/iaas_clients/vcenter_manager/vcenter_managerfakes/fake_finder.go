// Code generated by counterfeiter. DO NOT EDIT.
package vcenter_managerfakes

import (
	context "context"
	sync "sync"

	vcenter_manager "github.com/cloudfoundry-incubator/stembuild/iaas_cli/iaas_clients/vcenter_manager"
	object "github.com/vmware/govmomi/object"
)

type FakeFinder struct {
	VirtualMachineStub        func(context.Context, string) (*object.VirtualMachine, error)
	virtualMachineMutex       sync.RWMutex
	virtualMachineArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	virtualMachineReturns struct {
		result1 *object.VirtualMachine
		result2 error
	}
	virtualMachineReturnsOnCall map[int]struct {
		result1 *object.VirtualMachine
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFinder) VirtualMachine(arg1 context.Context, arg2 string) (*object.VirtualMachine, error) {
	fake.virtualMachineMutex.Lock()
	ret, specificReturn := fake.virtualMachineReturnsOnCall[len(fake.virtualMachineArgsForCall)]
	fake.virtualMachineArgsForCall = append(fake.virtualMachineArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("VirtualMachine", []interface{}{arg1, arg2})
	fake.virtualMachineMutex.Unlock()
	if fake.VirtualMachineStub != nil {
		return fake.VirtualMachineStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.virtualMachineReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFinder) VirtualMachineCallCount() int {
	fake.virtualMachineMutex.RLock()
	defer fake.virtualMachineMutex.RUnlock()
	return len(fake.virtualMachineArgsForCall)
}

func (fake *FakeFinder) VirtualMachineCalls(stub func(context.Context, string) (*object.VirtualMachine, error)) {
	fake.virtualMachineMutex.Lock()
	defer fake.virtualMachineMutex.Unlock()
	fake.VirtualMachineStub = stub
}

func (fake *FakeFinder) VirtualMachineArgsForCall(i int) (context.Context, string) {
	fake.virtualMachineMutex.RLock()
	defer fake.virtualMachineMutex.RUnlock()
	argsForCall := fake.virtualMachineArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFinder) VirtualMachineReturns(result1 *object.VirtualMachine, result2 error) {
	fake.virtualMachineMutex.Lock()
	defer fake.virtualMachineMutex.Unlock()
	fake.VirtualMachineStub = nil
	fake.virtualMachineReturns = struct {
		result1 *object.VirtualMachine
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) VirtualMachineReturnsOnCall(i int, result1 *object.VirtualMachine, result2 error) {
	fake.virtualMachineMutex.Lock()
	defer fake.virtualMachineMutex.Unlock()
	fake.VirtualMachineStub = nil
	if fake.virtualMachineReturnsOnCall == nil {
		fake.virtualMachineReturnsOnCall = make(map[int]struct {
			result1 *object.VirtualMachine
			result2 error
		})
	}
	fake.virtualMachineReturnsOnCall[i] = struct {
		result1 *object.VirtualMachine
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.virtualMachineMutex.RLock()
	defer fake.virtualMachineMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vcenter_manager.Finder = new(FakeFinder)
