// Code generated by MockGen. DO NOT EDIT.
// Source: remotemanager.go

// Package mock_remotemanager is a generated GoMock package.
package mock_remotemanager

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRemoteManager is a mock of RemoteManager interface
type MockRemoteManager struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteManagerMockRecorder
}

// MockRemoteManagerMockRecorder is the mock recorder for MockRemoteManager
type MockRemoteManagerMockRecorder struct {
	mock *MockRemoteManager
}

// NewMockRemoteManager creates a new mock instance
func NewMockRemoteManager(ctrl *gomock.Controller) *MockRemoteManager {
	mock := &MockRemoteManager{ctrl: ctrl}
	mock.recorder = &MockRemoteManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteManager) EXPECT() *MockRemoteManagerMockRecorder {
	return m.recorder
}

// UploadArtifact mocks base method
func (m *MockRemoteManager) UploadArtifact(source, destination string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArtifact", source, destination)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadArtifact indicates an expected call of UploadArtifact
func (mr *MockRemoteManagerMockRecorder) UploadArtifact(source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArtifact", reflect.TypeOf((*MockRemoteManager)(nil).UploadArtifact), source, destination)
}

// ExtractArchive mocks base method
func (m *MockRemoteManager) ExtractArchive(source, destination string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractArchive", source, destination)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractArchive indicates an expected call of ExtractArchive
func (mr *MockRemoteManagerMockRecorder) ExtractArchive(source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractArchive", reflect.TypeOf((*MockRemoteManager)(nil).ExtractArchive), source, destination)
}

// ExecuteCommand mocks base method
func (m *MockRemoteManager) ExecuteCommand(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCommand indicates an expected call of ExecuteCommand
func (mr *MockRemoteManagerMockRecorder) ExecuteCommand(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockRemoteManager)(nil).ExecuteCommand), file)
}

// CanConnectToVM mocks base method
func (m *MockRemoteManager) CanConnectToVM() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanConnectToVM")
	ret0, _ := ret[0].(error)
	return ret0
}

// CanConnectToVM indicates an expected call of CanConnectToVM
func (mr *MockRemoteManagerMockRecorder) CanConnectToVM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanConnectToVM", reflect.TypeOf((*MockRemoteManager)(nil).CanConnectToVM))
}
