// Code generated by counterfeiter. DO NOT EDIT.
package constructfakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry-incubator/stembuild/construct"
)

type FakeGuestManager struct {
	ExitCodeForProgramInGuestStub        func(context.Context, int64) (int32, error)
	exitCodeForProgramInGuestMutex       sync.RWMutex
	exitCodeForProgramInGuestArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	exitCodeForProgramInGuestReturns struct {
		result1 int32
		result2 error
	}
	exitCodeForProgramInGuestReturnsOnCall map[int]struct {
		result1 int32
		result2 error
	}
	StartProgramInGuestStub        func(context.Context, string, string) (int64, error)
	startProgramInGuestMutex       sync.RWMutex
	startProgramInGuestArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	startProgramInGuestReturns struct {
		result1 int64
		result2 error
	}
	startProgramInGuestReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGuestManager) ExitCodeForProgramInGuest(arg1 context.Context, arg2 int64) (int32, error) {
	fake.exitCodeForProgramInGuestMutex.Lock()
	ret, specificReturn := fake.exitCodeForProgramInGuestReturnsOnCall[len(fake.exitCodeForProgramInGuestArgsForCall)]
	fake.exitCodeForProgramInGuestArgsForCall = append(fake.exitCodeForProgramInGuestArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("ExitCodeForProgramInGuest", []interface{}{arg1, arg2})
	fake.exitCodeForProgramInGuestMutex.Unlock()
	if fake.ExitCodeForProgramInGuestStub != nil {
		return fake.ExitCodeForProgramInGuestStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exitCodeForProgramInGuestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGuestManager) ExitCodeForProgramInGuestCallCount() int {
	fake.exitCodeForProgramInGuestMutex.RLock()
	defer fake.exitCodeForProgramInGuestMutex.RUnlock()
	return len(fake.exitCodeForProgramInGuestArgsForCall)
}

func (fake *FakeGuestManager) ExitCodeForProgramInGuestCalls(stub func(context.Context, int64) (int32, error)) {
	fake.exitCodeForProgramInGuestMutex.Lock()
	defer fake.exitCodeForProgramInGuestMutex.Unlock()
	fake.ExitCodeForProgramInGuestStub = stub
}

func (fake *FakeGuestManager) ExitCodeForProgramInGuestArgsForCall(i int) (context.Context, int64) {
	fake.exitCodeForProgramInGuestMutex.RLock()
	defer fake.exitCodeForProgramInGuestMutex.RUnlock()
	argsForCall := fake.exitCodeForProgramInGuestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGuestManager) ExitCodeForProgramInGuestReturns(result1 int32, result2 error) {
	fake.exitCodeForProgramInGuestMutex.Lock()
	defer fake.exitCodeForProgramInGuestMutex.Unlock()
	fake.ExitCodeForProgramInGuestStub = nil
	fake.exitCodeForProgramInGuestReturns = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *FakeGuestManager) ExitCodeForProgramInGuestReturnsOnCall(i int, result1 int32, result2 error) {
	fake.exitCodeForProgramInGuestMutex.Lock()
	defer fake.exitCodeForProgramInGuestMutex.Unlock()
	fake.ExitCodeForProgramInGuestStub = nil
	if fake.exitCodeForProgramInGuestReturnsOnCall == nil {
		fake.exitCodeForProgramInGuestReturnsOnCall = make(map[int]struct {
			result1 int32
			result2 error
		})
	}
	fake.exitCodeForProgramInGuestReturnsOnCall[i] = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *FakeGuestManager) StartProgramInGuest(arg1 context.Context, arg2 string, arg3 string) (int64, error) {
	fake.startProgramInGuestMutex.Lock()
	ret, specificReturn := fake.startProgramInGuestReturnsOnCall[len(fake.startProgramInGuestArgsForCall)]
	fake.startProgramInGuestArgsForCall = append(fake.startProgramInGuestArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("StartProgramInGuest", []interface{}{arg1, arg2, arg3})
	fake.startProgramInGuestMutex.Unlock()
	if fake.StartProgramInGuestStub != nil {
		return fake.StartProgramInGuestStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startProgramInGuestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGuestManager) StartProgramInGuestCallCount() int {
	fake.startProgramInGuestMutex.RLock()
	defer fake.startProgramInGuestMutex.RUnlock()
	return len(fake.startProgramInGuestArgsForCall)
}

func (fake *FakeGuestManager) StartProgramInGuestCalls(stub func(context.Context, string, string) (int64, error)) {
	fake.startProgramInGuestMutex.Lock()
	defer fake.startProgramInGuestMutex.Unlock()
	fake.StartProgramInGuestStub = stub
}

func (fake *FakeGuestManager) StartProgramInGuestArgsForCall(i int) (context.Context, string, string) {
	fake.startProgramInGuestMutex.RLock()
	defer fake.startProgramInGuestMutex.RUnlock()
	argsForCall := fake.startProgramInGuestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGuestManager) StartProgramInGuestReturns(result1 int64, result2 error) {
	fake.startProgramInGuestMutex.Lock()
	defer fake.startProgramInGuestMutex.Unlock()
	fake.StartProgramInGuestStub = nil
	fake.startProgramInGuestReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeGuestManager) StartProgramInGuestReturnsOnCall(i int, result1 int64, result2 error) {
	fake.startProgramInGuestMutex.Lock()
	defer fake.startProgramInGuestMutex.Unlock()
	fake.StartProgramInGuestStub = nil
	if fake.startProgramInGuestReturnsOnCall == nil {
		fake.startProgramInGuestReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.startProgramInGuestReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeGuestManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exitCodeForProgramInGuestMutex.RLock()
	defer fake.exitCodeForProgramInGuestMutex.RUnlock()
	fake.startProgramInGuestMutex.RLock()
	defer fake.startProgramInGuestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGuestManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ construct.GuestManager = new(FakeGuestManager)
