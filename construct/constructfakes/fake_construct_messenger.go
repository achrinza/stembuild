// Code generated by counterfeiter. DO NOT EDIT.
package constructfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/stembuild/construct"
)

type FakeConstructMessenger struct {
	CreateProvisionDirStartedStub        func()
	createProvisionDirStartedMutex       sync.RWMutex
	createProvisionDirStartedArgsForCall []struct {
	}
	CreateProvisionDirSucceededStub        func()
	createProvisionDirSucceededMutex       sync.RWMutex
	createProvisionDirSucceededArgsForCall []struct {
	}
	EnableWinRMStartedStub        func()
	enableWinRMStartedMutex       sync.RWMutex
	enableWinRMStartedArgsForCall []struct {
	}
	EnableWinRMSucceededStub        func()
	enableWinRMSucceededMutex       sync.RWMutex
	enableWinRMSucceededArgsForCall []struct {
	}
	ValidateVMConnectionStartedStub        func()
	validateVMConnectionStartedMutex       sync.RWMutex
	validateVMConnectionStartedArgsForCall []struct {
	}
	ValidateVMConnectionSucceededStub        func()
	validateVMConnectionSucceededMutex       sync.RWMutex
	validateVMConnectionSucceededArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConstructMessenger) CreateProvisionDirStarted() {
	fake.createProvisionDirStartedMutex.Lock()
	fake.createProvisionDirStartedArgsForCall = append(fake.createProvisionDirStartedArgsForCall, struct {
	}{})
	fake.recordInvocation("CreateProvisionDirStarted", []interface{}{})
	fake.createProvisionDirStartedMutex.Unlock()
	if fake.CreateProvisionDirStartedStub != nil {
		fake.CreateProvisionDirStartedStub()
	}
}

func (fake *FakeConstructMessenger) CreateProvisionDirStartedCallCount() int {
	fake.createProvisionDirStartedMutex.RLock()
	defer fake.createProvisionDirStartedMutex.RUnlock()
	return len(fake.createProvisionDirStartedArgsForCall)
}

func (fake *FakeConstructMessenger) CreateProvisionDirStartedCalls(stub func()) {
	fake.createProvisionDirStartedMutex.Lock()
	defer fake.createProvisionDirStartedMutex.Unlock()
	fake.CreateProvisionDirStartedStub = stub
}

func (fake *FakeConstructMessenger) CreateProvisionDirSucceeded() {
	fake.createProvisionDirSucceededMutex.Lock()
	fake.createProvisionDirSucceededArgsForCall = append(fake.createProvisionDirSucceededArgsForCall, struct {
	}{})
	fake.recordInvocation("CreateProvisionDirSucceeded", []interface{}{})
	fake.createProvisionDirSucceededMutex.Unlock()
	if fake.CreateProvisionDirSucceededStub != nil {
		fake.CreateProvisionDirSucceededStub()
	}
}

func (fake *FakeConstructMessenger) CreateProvisionDirSucceededCallCount() int {
	fake.createProvisionDirSucceededMutex.RLock()
	defer fake.createProvisionDirSucceededMutex.RUnlock()
	return len(fake.createProvisionDirSucceededArgsForCall)
}

func (fake *FakeConstructMessenger) CreateProvisionDirSucceededCalls(stub func()) {
	fake.createProvisionDirSucceededMutex.Lock()
	defer fake.createProvisionDirSucceededMutex.Unlock()
	fake.CreateProvisionDirSucceededStub = stub
}

func (fake *FakeConstructMessenger) EnableWinRMStarted() {
	fake.enableWinRMStartedMutex.Lock()
	fake.enableWinRMStartedArgsForCall = append(fake.enableWinRMStartedArgsForCall, struct {
	}{})
	fake.recordInvocation("EnableWinRMStarted", []interface{}{})
	fake.enableWinRMStartedMutex.Unlock()
	if fake.EnableWinRMStartedStub != nil {
		fake.EnableWinRMStartedStub()
	}
}

func (fake *FakeConstructMessenger) EnableWinRMStartedCallCount() int {
	fake.enableWinRMStartedMutex.RLock()
	defer fake.enableWinRMStartedMutex.RUnlock()
	return len(fake.enableWinRMStartedArgsForCall)
}

func (fake *FakeConstructMessenger) EnableWinRMStartedCalls(stub func()) {
	fake.enableWinRMStartedMutex.Lock()
	defer fake.enableWinRMStartedMutex.Unlock()
	fake.EnableWinRMStartedStub = stub
}

func (fake *FakeConstructMessenger) EnableWinRMSucceeded() {
	fake.enableWinRMSucceededMutex.Lock()
	fake.enableWinRMSucceededArgsForCall = append(fake.enableWinRMSucceededArgsForCall, struct {
	}{})
	fake.recordInvocation("EnableWinRMSucceeded", []interface{}{})
	fake.enableWinRMSucceededMutex.Unlock()
	if fake.EnableWinRMSucceededStub != nil {
		fake.EnableWinRMSucceededStub()
	}
}

func (fake *FakeConstructMessenger) EnableWinRMSucceededCallCount() int {
	fake.enableWinRMSucceededMutex.RLock()
	defer fake.enableWinRMSucceededMutex.RUnlock()
	return len(fake.enableWinRMSucceededArgsForCall)
}

func (fake *FakeConstructMessenger) EnableWinRMSucceededCalls(stub func()) {
	fake.enableWinRMSucceededMutex.Lock()
	defer fake.enableWinRMSucceededMutex.Unlock()
	fake.EnableWinRMSucceededStub = stub
}

func (fake *FakeConstructMessenger) ValidateVMConnectionStarted() {
	fake.validateVMConnectionStartedMutex.Lock()
	fake.validateVMConnectionStartedArgsForCall = append(fake.validateVMConnectionStartedArgsForCall, struct {
	}{})
	fake.recordInvocation("ValidateVMConnectionStarted", []interface{}{})
	fake.validateVMConnectionStartedMutex.Unlock()
	if fake.ValidateVMConnectionStartedStub != nil {
		fake.ValidateVMConnectionStartedStub()
	}
}

func (fake *FakeConstructMessenger) ValidateVMConnectionStartedCallCount() int {
	fake.validateVMConnectionStartedMutex.RLock()
	defer fake.validateVMConnectionStartedMutex.RUnlock()
	return len(fake.validateVMConnectionStartedArgsForCall)
}

func (fake *FakeConstructMessenger) ValidateVMConnectionStartedCalls(stub func()) {
	fake.validateVMConnectionStartedMutex.Lock()
	defer fake.validateVMConnectionStartedMutex.Unlock()
	fake.ValidateVMConnectionStartedStub = stub
}

func (fake *FakeConstructMessenger) ValidateVMConnectionSucceeded() {
	fake.validateVMConnectionSucceededMutex.Lock()
	fake.validateVMConnectionSucceededArgsForCall = append(fake.validateVMConnectionSucceededArgsForCall, struct {
	}{})
	fake.recordInvocation("ValidateVMConnectionSucceeded", []interface{}{})
	fake.validateVMConnectionSucceededMutex.Unlock()
	if fake.ValidateVMConnectionSucceededStub != nil {
		fake.ValidateVMConnectionSucceededStub()
	}
}

func (fake *FakeConstructMessenger) ValidateVMConnectionSucceededCallCount() int {
	fake.validateVMConnectionSucceededMutex.RLock()
	defer fake.validateVMConnectionSucceededMutex.RUnlock()
	return len(fake.validateVMConnectionSucceededArgsForCall)
}

func (fake *FakeConstructMessenger) ValidateVMConnectionSucceededCalls(stub func()) {
	fake.validateVMConnectionSucceededMutex.Lock()
	defer fake.validateVMConnectionSucceededMutex.Unlock()
	fake.ValidateVMConnectionSucceededStub = stub
}

func (fake *FakeConstructMessenger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createProvisionDirStartedMutex.RLock()
	defer fake.createProvisionDirStartedMutex.RUnlock()
	fake.createProvisionDirSucceededMutex.RLock()
	defer fake.createProvisionDirSucceededMutex.RUnlock()
	fake.enableWinRMStartedMutex.RLock()
	defer fake.enableWinRMStartedMutex.RUnlock()
	fake.enableWinRMSucceededMutex.RLock()
	defer fake.enableWinRMSucceededMutex.RUnlock()
	fake.validateVMConnectionStartedMutex.RLock()
	defer fake.validateVMConnectionStartedMutex.RUnlock()
	fake.validateVMConnectionSucceededMutex.RLock()
	defer fake.validateVMConnectionSucceededMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConstructMessenger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ construct.ConstructMessenger = new(FakeConstructMessenger)
