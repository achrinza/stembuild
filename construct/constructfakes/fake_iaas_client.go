// Code generated by counterfeiter. DO NOT EDIT.
package constructfakes

import (
	sync "sync"

	construct "github.com/cloudfoundry-incubator/stembuild/construct"
)

type FakeIaasClient struct {
	MakeDirectoryStub        func(string, string, string, string) error
	makeDirectoryMutex       sync.RWMutex
	makeDirectoryArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	makeDirectoryReturns struct {
		result1 error
	}
	makeDirectoryReturnsOnCall map[int]struct {
		result1 error
	}
	UploadArtifactStub        func(string, string, string, string, string) error
	uploadArtifactMutex       sync.RWMutex
	uploadArtifactArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	uploadArtifactReturns struct {
		result1 error
	}
	uploadArtifactReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIaasClient) MakeDirectory(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.makeDirectoryMutex.Lock()
	ret, specificReturn := fake.makeDirectoryReturnsOnCall[len(fake.makeDirectoryArgsForCall)]
	fake.makeDirectoryArgsForCall = append(fake.makeDirectoryArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("MakeDirectory", []interface{}{arg1, arg2, arg3, arg4})
	fake.makeDirectoryMutex.Unlock()
	if fake.MakeDirectoryStub != nil {
		return fake.MakeDirectoryStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.makeDirectoryReturns
	return fakeReturns.result1
}

func (fake *FakeIaasClient) MakeDirectoryCallCount() int {
	fake.makeDirectoryMutex.RLock()
	defer fake.makeDirectoryMutex.RUnlock()
	return len(fake.makeDirectoryArgsForCall)
}

func (fake *FakeIaasClient) MakeDirectoryCalls(stub func(string, string, string, string) error) {
	fake.makeDirectoryMutex.Lock()
	defer fake.makeDirectoryMutex.Unlock()
	fake.MakeDirectoryStub = stub
}

func (fake *FakeIaasClient) MakeDirectoryArgsForCall(i int) (string, string, string, string) {
	fake.makeDirectoryMutex.RLock()
	defer fake.makeDirectoryMutex.RUnlock()
	argsForCall := fake.makeDirectoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIaasClient) MakeDirectoryReturns(result1 error) {
	fake.makeDirectoryMutex.Lock()
	defer fake.makeDirectoryMutex.Unlock()
	fake.MakeDirectoryStub = nil
	fake.makeDirectoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIaasClient) MakeDirectoryReturnsOnCall(i int, result1 error) {
	fake.makeDirectoryMutex.Lock()
	defer fake.makeDirectoryMutex.Unlock()
	fake.MakeDirectoryStub = nil
	if fake.makeDirectoryReturnsOnCall == nil {
		fake.makeDirectoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeDirectoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIaasClient) UploadArtifact(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string) error {
	fake.uploadArtifactMutex.Lock()
	ret, specificReturn := fake.uploadArtifactReturnsOnCall[len(fake.uploadArtifactArgsForCall)]
	fake.uploadArtifactArgsForCall = append(fake.uploadArtifactArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("UploadArtifact", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.uploadArtifactMutex.Unlock()
	if fake.UploadArtifactStub != nil {
		return fake.UploadArtifactStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadArtifactReturns
	return fakeReturns.result1
}

func (fake *FakeIaasClient) UploadArtifactCallCount() int {
	fake.uploadArtifactMutex.RLock()
	defer fake.uploadArtifactMutex.RUnlock()
	return len(fake.uploadArtifactArgsForCall)
}

func (fake *FakeIaasClient) UploadArtifactCalls(stub func(string, string, string, string, string) error) {
	fake.uploadArtifactMutex.Lock()
	defer fake.uploadArtifactMutex.Unlock()
	fake.UploadArtifactStub = stub
}

func (fake *FakeIaasClient) UploadArtifactArgsForCall(i int) (string, string, string, string, string) {
	fake.uploadArtifactMutex.RLock()
	defer fake.uploadArtifactMutex.RUnlock()
	argsForCall := fake.uploadArtifactArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeIaasClient) UploadArtifactReturns(result1 error) {
	fake.uploadArtifactMutex.Lock()
	defer fake.uploadArtifactMutex.Unlock()
	fake.UploadArtifactStub = nil
	fake.uploadArtifactReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIaasClient) UploadArtifactReturnsOnCall(i int, result1 error) {
	fake.uploadArtifactMutex.Lock()
	defer fake.uploadArtifactMutex.Unlock()
	fake.UploadArtifactStub = nil
	if fake.uploadArtifactReturnsOnCall == nil {
		fake.uploadArtifactReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadArtifactReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIaasClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeDirectoryMutex.RLock()
	defer fake.makeDirectoryMutex.RUnlock()
	fake.uploadArtifactMutex.RLock()
	defer fake.uploadArtifactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIaasClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ construct.IaasClient = new(FakeIaasClient)
