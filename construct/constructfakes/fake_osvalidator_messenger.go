// Code generated by counterfeiter. DO NOT EDIT.
package constructfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/stembuild/construct"
)

type FakeOSValidatorMessenger struct {
	DownloadFileFailedStub        func(string)
	downloadFileFailedMutex       sync.RWMutex
	downloadFileFailedArgsForCall []struct {
		arg1 string
	}
	ExitCodeRetrievalFailedStub        func(string)
	exitCodeRetrievalFailedMutex       sync.RWMutex
	exitCodeRetrievalFailedArgsForCall []struct {
		arg1 string
	}
	OSVersionFileCreationFailedStub        func(string)
	oSVersionFileCreationFailedMutex       sync.RWMutex
	oSVersionFileCreationFailedArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOSValidatorMessenger) DownloadFileFailed(arg1 string) {
	fake.downloadFileFailedMutex.Lock()
	fake.downloadFileFailedArgsForCall = append(fake.downloadFileFailedArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DownloadFileFailed", []interface{}{arg1})
	fake.downloadFileFailedMutex.Unlock()
	if fake.DownloadFileFailedStub != nil {
		fake.DownloadFileFailedStub(arg1)
	}
}

func (fake *FakeOSValidatorMessenger) DownloadFileFailedCallCount() int {
	fake.downloadFileFailedMutex.RLock()
	defer fake.downloadFileFailedMutex.RUnlock()
	return len(fake.downloadFileFailedArgsForCall)
}

func (fake *FakeOSValidatorMessenger) DownloadFileFailedCalls(stub func(string)) {
	fake.downloadFileFailedMutex.Lock()
	defer fake.downloadFileFailedMutex.Unlock()
	fake.DownloadFileFailedStub = stub
}

func (fake *FakeOSValidatorMessenger) DownloadFileFailedArgsForCall(i int) string {
	fake.downloadFileFailedMutex.RLock()
	defer fake.downloadFileFailedMutex.RUnlock()
	argsForCall := fake.downloadFileFailedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOSValidatorMessenger) ExitCodeRetrievalFailed(arg1 string) {
	fake.exitCodeRetrievalFailedMutex.Lock()
	fake.exitCodeRetrievalFailedArgsForCall = append(fake.exitCodeRetrievalFailedArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ExitCodeRetrievalFailed", []interface{}{arg1})
	fake.exitCodeRetrievalFailedMutex.Unlock()
	if fake.ExitCodeRetrievalFailedStub != nil {
		fake.ExitCodeRetrievalFailedStub(arg1)
	}
}

func (fake *FakeOSValidatorMessenger) ExitCodeRetrievalFailedCallCount() int {
	fake.exitCodeRetrievalFailedMutex.RLock()
	defer fake.exitCodeRetrievalFailedMutex.RUnlock()
	return len(fake.exitCodeRetrievalFailedArgsForCall)
}

func (fake *FakeOSValidatorMessenger) ExitCodeRetrievalFailedCalls(stub func(string)) {
	fake.exitCodeRetrievalFailedMutex.Lock()
	defer fake.exitCodeRetrievalFailedMutex.Unlock()
	fake.ExitCodeRetrievalFailedStub = stub
}

func (fake *FakeOSValidatorMessenger) ExitCodeRetrievalFailedArgsForCall(i int) string {
	fake.exitCodeRetrievalFailedMutex.RLock()
	defer fake.exitCodeRetrievalFailedMutex.RUnlock()
	argsForCall := fake.exitCodeRetrievalFailedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOSValidatorMessenger) OSVersionFileCreationFailed(arg1 string) {
	fake.oSVersionFileCreationFailedMutex.Lock()
	fake.oSVersionFileCreationFailedArgsForCall = append(fake.oSVersionFileCreationFailedArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("OSVersionFileCreationFailed", []interface{}{arg1})
	fake.oSVersionFileCreationFailedMutex.Unlock()
	if fake.OSVersionFileCreationFailedStub != nil {
		fake.OSVersionFileCreationFailedStub(arg1)
	}
}

func (fake *FakeOSValidatorMessenger) OSVersionFileCreationFailedCallCount() int {
	fake.oSVersionFileCreationFailedMutex.RLock()
	defer fake.oSVersionFileCreationFailedMutex.RUnlock()
	return len(fake.oSVersionFileCreationFailedArgsForCall)
}

func (fake *FakeOSValidatorMessenger) OSVersionFileCreationFailedCalls(stub func(string)) {
	fake.oSVersionFileCreationFailedMutex.Lock()
	defer fake.oSVersionFileCreationFailedMutex.Unlock()
	fake.OSVersionFileCreationFailedStub = stub
}

func (fake *FakeOSValidatorMessenger) OSVersionFileCreationFailedArgsForCall(i int) string {
	fake.oSVersionFileCreationFailedMutex.RLock()
	defer fake.oSVersionFileCreationFailedMutex.RUnlock()
	argsForCall := fake.oSVersionFileCreationFailedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOSValidatorMessenger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadFileFailedMutex.RLock()
	defer fake.downloadFileFailedMutex.RUnlock()
	fake.exitCodeRetrievalFailedMutex.RLock()
	defer fake.exitCodeRetrievalFailedMutex.RUnlock()
	fake.oSVersionFileCreationFailedMutex.RLock()
	defer fake.oSVersionFileCreationFailedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOSValidatorMessenger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ construct.OSValidatorMessenger = new(FakeOSValidatorMessenger)
