// The following directive is necessary to make the package coherent:
// +build ignore

// This is used to generate the go format of the version/version file
// The version/version file is updated by our Concourse Pipelines

package main

import (
	"bufio"
	"fmt"
	"os"
	"text/template"
	"time"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package version

var Version = "{{ .Version }}"
`))

func main() {
	version, err := os.Open("version/version")
	if err != nil {
		_, _ = fmt.Fprintf(os.Stderr, "error opening version file: %s", err)
		os.Exit(1)
	}
	//noinspection GoUnhandledErrorResult
	defer version.Close()

	r := bufio.NewReader(version)
	line, _, err := r.ReadLine()
	if err != nil {
		_, _ = fmt.Fprintf(os.Stderr, "could not read version file: %s", err)
		os.Exit(1)
	}

	goVersion, err := os.Create("version/version.go")
	if err != nil {
		_, _ = fmt.Fprintf(os.Stderr, "error creating version.go file: %s", err)
		os.Exit(1)
	}
	//noinspection GoUnhandledErrorResult
	defer goVersion.Close()

	err = packageTemplate.Execute(goVersion, struct {
		Timestamp time.Time
		Version   string
	}{
		Timestamp: time.Now(),
		Version:   string(line[:]),
	})
	if err != nil {
		_, _ = fmt.Fprintf(os.Stderr, "failed to populate version.go file: %s", err)
		os.Exit(1)
	}
}
