package ovftool_test

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"os"
	"runtime"

	"github.com/pivotal-cf-experimental/stembuild/pack/ovftool"
	"path/filepath"
)

var _ = Describe("ovftool", func() {

	Context("findExecutable", func() {
		var stemExe = "stembuild"
		if runtime.GOOS == "windows" {
			stemExe += ".exe"
		}

		It("given root that has executable and valid executable name, should return location of the executable", func() {
			pwd, err := os.Getwd()
			Expect(err).NotTo(HaveOccurred())
			// pwd is set to stembuild/ovftool, so we need to go up a directory
			pwd = filepath.Join(pwd, "..", "..")

			executable, err := ovftool.FindExecutable(pwd, stemExe)

			Expect(err).NotTo(HaveOccurred())
			Expect(executable).To(Equal(filepath.Join(pwd, "out", stemExe)))
		})

		It("given root that does not have the executable and valid executable name, should return an error", func() {
			pwd, err := os.Getwd() //pwd is set to stembuild/ovftool, and stembuild won't be found here
			Expect(err).NotTo(HaveOccurred())
			errorString := "executable file not found in: " + pwd

			executable, err := ovftool.FindExecutable(pwd, stemExe)

			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring(errorString))
			Expect(executable).To(Equal(""))
		})

		It("given valid root and invalid name, should return an error", func() {
			pwd, err := os.Getwd()
			Expect(err).NotTo(HaveOccurred())
			// pwd is set to stembuild/ovftool, so we need to go up a directory
			pwd = filepath.Join(pwd, "..", "..")
			errorString := "executable file not found in: " + pwd

			executable, err := ovftool.FindExecutable(pwd, "notRealExec")

			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring(errorString))
			Expect(executable).To(Equal(""))
		})

		It("given invalid root and valid name, should return an error", func() {
			pwd, err := os.Getwd()
			Expect(err).NotTo(HaveOccurred())
			// pwd is set to stembuild/ovftool, so we need to go up a directory
			pwd = filepath.Join(pwd, "..", "dirShouldNotExist")

			executable, err := ovftool.FindExecutable(pwd, stemExe)

			// No need to check entire error string as it'is not generated by our code
			Expect(err).To(HaveOccurred())
			Expect(executable).To(Equal(""))
		})
	})
})
